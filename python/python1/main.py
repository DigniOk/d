#Задача 2: Найдите сумму цифр трехзначного числа.
# n = int(input('Введите трехзначное число '))
# summa = 0
# while n > 0:
#     x = n % 10
#     summa = summa + x
#     n = n // 10    
# else:
#     print(summa)


#Задача 4: Петя, Катя и Сережа делают из бумаги журавликов. Вместе они сделали S журавликов. Сколько журавликов сделал каждый ребенок,
#если известно, что Петя и Сережа сделали одинаковое количество журавликов, а Катя сделала в два раза больше журавликов, чем Петя и Сережа вместе?
# n = int(input('Введите число '))
# b = round (n / 3 / 2, 1)
# a = b
# c = (a + b) + (a + b)
# print(b , a, c)

# Задача 6: Вы пользуетесь общественным транспортом? Вероятно, вы расплачивались за проезд и получали билет с номером. 
# Счастливым билетом называют такой билет с шестизначным номером, где сумма первых трех цифр равна сумме последних трех.
# Т.е. билет с номером 385916 – счастливый, т.к. 3+8+5=9+1+6. Вам требуется написать программу, которая проверяет счастливость билета.

# n = int(input('Введите номер билета(6 цифр) = '))
# b = n % 1000
# c = n // 1000
# summb = 0
# summc = 0
# while b > 0:
#      x = b % 10
#      summb = summb + x
#      b = b // 10
# else:
#      print(summb)       
# while c > 0:
#      x = c % 10
#      summc = summc + x
#      c = c // 10
# else:
#      print(summc)
# if summb == summc:
#     print('Билет счастливый')
# else:
#     print('Билет не счастливый')

# Требуется определить, можно ли от шоколадки размером n × m долек отломить k долек,
# если разрешается сделать один разлом по прямой между дольками (то есть разломить шоколадку на два прямоугольника).

# n = int(input('Введите длину шоколадки '))
# m = int(input('Введите ширину шоколадки '))
# k = int(input('Введите количество долек которые хотим скушать '))
# if ((n*m) > 0) and (k % 2 == 0) and (m<3):
#     print(f"{n} {m} {k} " 'да')
# else:
#     print(f"{n} {m} {k} " 'нет')

# Посчитать факториал

# n = int(input('Введите число ')) 
# sum = 1;   
# while (n > 1):
#     sum = sum * n
#     n=n-1
# print(sum)



# Программа которая считает число Фибоначчи
# A = int(input("Ведите искомый номер числа фибоначчи "))

# if A == 0:
#     print("0")

# elif A == 1:
#     print("1\nили")

# if (A < 0):
#    print("-1")
# else:
#    fib1 = 0
#    fib2 = 1
#    fib3 = 1
#    FibIndx = 2

# while (fib2 < A):
#    fib3 = fib1 + fib2
#    fib1 = fib2
#    fib2 = fib3
#    FibIndx += 1

# result = FibIndx

# if fib2 == A:

#    print(result)

# else:
#    print("-1")


# Уставшие от необычно теплой зимы, жители решили узнать,действительно ли это самая длинная оттепель за всю историю
# наблюдений за погодой. Они обратились к синоптикам, а те, в свою очередь, занялись исследованиями статистики за
# прошлые годы. Их интересует, сколько дней длилась самая длинная оттепель. Оттепелью они называют период, в
# который среднесуточная температура ежедневно превышала 0 градусов Цельсия. Напишите программу, помогающую
# синоптикам в работе. Пользователь вводит число N – общее количество рассматриваемых дней (1 ≤ N ≤ 100). В следующих строках
# располагается N целых чисел. Каждое число – среднесуточная температура в соответствующий день. Температуры – целые числа и лежат в
# диапазоне от –50 до 50
# Input: 6 -> -20 30 -40 50 10 -10
# Output: 2



# import random
# rand_list=[]
# A = int(input("Количество дней "))
# sum = 0
# blad = 0
# if (A >= 1) and (A <= 100):
#    print("Смотрим температуру")
# print(A)
# for i in range(A):
#     rand_list.append(random.randint(-50,50))
# print(rand_list)
# for i in rand_list:
#     if i > 0:
#        sum = sum + 1
#        if blad < sum:
#            blad = sum
#     elif i <= 0:
#         sum = 0
# print(blad)

# Задача No15. Решение в группах: Иван Васильевич пришел на рынок и решил купить два арбуза: один для себя, а другой для тещи. Понятно, что для себя нужно выбрать арбуз потяжелей,
# а для тещи полегче. Но вот незадача: арбузов слишком много и он не знает как же выбрать самый легкий и самый тяжелый арбуз? Помогите ему!
# Пользователь вводит одно число N – количество арбузов. Вторая строка содержит N чисел, записанных на новой строчке каждое.
# Здесь каждое число – это масса соответствующего арбуза
# Input: 5 -> 5 1 6 5 9 Output: 1 9      

# import random
# rand_list=[]
# A = int(input("Количество арбузов "))
# max = float('-inf')
# min = float('inf')
# if (A > 0): 
#    print("Смотрим арбузы")
# for i in range(A):
#     rand_list.append(random.randint(1,10))
# print(rand_list)
# for i in rand_list:
#     if max < i:
#         max = i
#     if min > i:
#         min = i
    

# print(f"Самый большой арбуз {max}")
# print(f"Самый маленький арбуз {min}")

# Задача 10: На столе лежат n монеток. Некоторые из них лежат вверх решкой, а некоторые – гербом. Определите минимальное число монеток, которые нужно перевернуть,
# чтобы все монетки были повернуты вверх одной и той же стороной. Выведите минимальное количество монет, которые нужно перевернуть

# import random
# rand_list=[]
# A = int(input("Количество монеток "))
# m1 = 0
# m2 = 0
# if (A > 0):
#     print('Считаем')
# else:
#      print ('Не считаем')
# for i in range(A):
#      rand_list.append(random.randint(0,1))
# print(rand_list)
# for i in rand_list:
#      if i == 1:
#           m1 = m1 + 1
#      else:
#           m2 = m2 + 1

# if m1 > m2 and m1 > 0 and m2 > 0:
#    print(f"Нужно перевернуть решку {m2} монеты ")
# if m2 > m1 and m1 > 0 and m2 > 0:
#      print (f"Нужно перевернуть орла {m1} монеты")
     
# if m1 == m2 or m1 == 0 or m2 == 0:
#      print('Переворачивать не надо')


# Петя и Катя – брат и сестра. Петя – студент, а Катя – школьница. Петя помогает Кате по математике. 
# Он задумывает два натуральных числа X и Y (X,Y≤1000), а Катя должна их отгадать.
# Для этого Петя делает две подсказки. Он называет сумму этих чисел S и их произведение P. Помогите Кате отгадать задуманные Петей числа.

# import random 
# rand_list=[]
# A = 2
# s = 0
# p = 0
# for i in range(A):
#      rand_list.append(random.randint(0,1000))
# print(rand_list)
# s = rand_list[0] + rand_list[1]
# p = rand_list[0] * rand_list[1]

# print(f"{s} и {p}")

# Задача 14
# Требуется вывести все целые степени двойки (т.е. числа вида 2k), не
# превосходящие числа N.

# A = int(input("Введите число "))
# i = 0
# while 2 ** i <= A:
#     print(2**i)

# Задача №17. Общее обсуждение
# Дан список чисел. Определите, сколько в нем
# встречается различных чисел.

# list_1 = [1, 1, 2, 0, -1, 3, 4, 4, 6, 7]
# sum = 1
# for i in list_1:
#     if list_1[0] != list_1[i] :
#         sum = sum + 1   
# print(sum) 
 
# or

# list_1 = [1, 1, 2, 0, -1, 3, 4, 4, 6, 7]
# mnoj = set (list_1)
# print(len(mnoj))

# or

# list_1 = [1, 1, 2, 0, -1, 3, 4, 4, 6, 7]
# list_2 = []
# for i in list_1:
#     if i not in list_2:
#         list_2.append(i)
# print(len(list_2))



# Задача №19. Решение в группах
# Дана последовательность из N целых чисел и число
# K. Необходимо сдвинуть всю последовательность
# (сдвиг - циклический) на K элементов вправо, K –
# положительное число.


# import random 
# rand_list=[]
# A = int(input("Ввести число эл в списке "))
# k = int(input("Ввести число "))
# for i in range(A):
#     rand_list.append(random.randint(0 , 100))
# print(rand_list)
# for i in range (k, (len(rand_list))):
#     b = rand_list.pop((len(rand_list)-1))
#     rand_list.insert(0, b)
# print(rand_list)


# Напишите программу для печати всех уникальных
# значений в словаре. 

# lst =  [{"V": "S001"}, {"V": "S002"}, {"VI": "S001"},
# {"VI": "S005"}, {"VII": " S005 "}, {" V ":" S009 "}, {" VIII":" S007 "}] 
# print(lst)
# a = set()
# for i in lst:
#     a.add(list(i.values())[0])
# print(a)


# # Дан массив, состоящий из целых чисел. Напишите
# # программу, которая подсчитает количество
# # элементов массива, больших предыдущего (элемента
# # с предыдущим номером) 


# import random 
# rand_list=[]
# A = int(input("Ввести число эл в списке "))
# count = 0
# rand_list.append(random.randint(-100 , 100))
# for i in range(1, A):
#     rand_list.append(random.randint(-100 , 100))
#     if rand_list[i] > rand_list[i-1]:
#         count = count + 1
# print(rand_list)
# print(f"Количество чисел : {count}")


# # Задача 16: Требуется вычислить, сколько раз встречается некоторое число X в массиве A[1..N]. 
# # Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# # В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

# import random 
# rand_list=[]
# A = int(input("Ввести число эл"))
# k = int(input("Введите цифру "))
# count = 0
# rand_list.append(random.randint(1 , 10))
# for i in range(A):
#     rand_list.append(random.randint(1 , 10))
#     if rand_list[i] == k:
#         count = count + 1
# print(rand_list)
# print(f"Количество чисел : {count}")

# # Задача 18: Требуется найти в массиве A[1..N] самый близкий по величине элемент к заданному числу X.
# # Пользователь в первой строке вводит натуральное число N – количество элементов в массиве.
# # В последующих  строках записаны N целых чисел Ai. Последняя строка содержит число X

# import random 
# rand_list=[]
# A = int(input("Ввести число эл: "))
# k = int(input("Введите цифру: "))
# for i in range(A):
#     rand_list.append(random.randint(1 , 20))
# print(rand_list)
# index = 0
# min = abs(k - rand_list[0])
# for i in range(1, A):
#     ele = abs(k - rand_list[i])
#     if ele < min:
#         min = ele
#         index = i
# print(f"Близкий по величине элемент к заданному числу {rand_list[index]}")
    



# # *Задача 20:В настольной игре Скрабл (Scrabble) каждая буква имеет определенную ценность. В случае с английским алфавитом очки распределяются так:
# # A, E, I, O, U, L, N, S, T, R – 1 очко; D, G – 2 очка; B, C, M, P – 3 очка; F, H, V, W, Y – 4 очка; K – 5 очков; J, X – 8 очков; Q, Z – 10 очков.
# # А русские буквы оцениваются так: 
# # А, В, Е, И, Н, О, Р, С, Т – 1 очко; Д, К, Л, М, П, У – 2 очка; Б, Г, Ё, Ь, Я – 3 очка; Й, Ы – 4 очка; Ж, З, Х, Ц, Ч – 5 очков; Ш, Э, Ю – 8 очков; Ф, Щ, Ъ – 10 очков. 
# # Напишите программу, которая вычисляет стоимость введенного пользователем слова. 
# # Будем считать, что на вход подается только одно слово, которое содержит либо только английские, либо только русские буквы.

# list_1 = {1:"AEIOULNSTRАВЕИНОРСТ",
#           2:"DGДКЛМПУ",
#           3:"BCMPБГЁЬЯ",
#           4:"FHVWYЙЫ",
#           5:"KЖЗХЦЧ",
#           8:"JXШЭЮ",
#           10:"QZФЩЪ"}
# x = input("Введите слово: ").upper()
# summ = 0
# for i in x:
#     for a, b in list_1.items():
#         if i in b:
#             summ = summ + a
# print(f"Стоимость слова: {summ}")

# # Задача 22: Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
# # Выдать без повторений в порядке возрастания все те числа, которые встречаются в обоих наборах.
# # Пользователь вводит 2 числа. n — кол-во элементов первого множества. m — кол-во элементов второго множества. З
# # атем пользователь вводит сами элементы множеств.

# import random 
# rand_list=[]
# rand_list_1=[]
# A = int(input("Введите число эл первого списка: "))
# B = int(input("Введите число эл второго списка: "))
# for i in range(A):
#     rand_list.append(random.randint(1 , 10))
# for i in range(B):
#     rand_list_1.append(random.randint(1 , 10))
# print(f"Первый список: {rand_list}")
# print(f"Второй список: {rand_list_1}")
# mnoj1 = set (rand_list)
# mnoj2 = set (rand_list_1)
# C=(mnoj1).union(mnoj2)
# print(f"Множество: {C}")



# # Задача 24: В фермерском хозяйстве в Карелии выращивают чернику. Она растёт на круглой грядке, причём кусты высажены только по окружности. 
# # Таким образом, у каждого куста есть ровно два соседних. Всего на грядке растёт N кустов.
# # Эти кусты обладают разной урожайностью, поэтому ко времени сбора на них выросло различное число ягод — на i-ом кусте выросло ai ягод.
# # В этом фермерском хозяйстве внедрена система автоматического сбора черники. Эта система состоит из управляющего модуля и нескольких собирающих модулей. 
# # Собирающий модуль за один заход, находясь непосредственно перед некоторым кустом, собирает ягоды с этого куста и с двух соседних с ним.
# # Напишите программу для нахождения максимального числа ягод, которое может собрать за один заход собирающий модуль,
# # находясь перед некоторым кустом заданной во входном файле грядки.

# import random 
# rand_list=[]
# A = int(input("Введите число кустов на на грядке: "))
# for i in range(A):
#      rand_list.append(random.randint(0 , 20))
# print(rand_list)
# X = int(input('Введите номер куста: '))
# cherry = 0
# if X == 1:
#     cherry = rand_list[0] + rand_list[1] + rand_list[-1]
# elif X == len(rand_list):
#      cherry = rand_list[-2] + rand_list[-1] + rand_list[0]
# else:
#      cherry = rand_list[X-1] + rand_list[X-2] + rand_list[X]
# print(f"Собрано {cherry} ягод")


# # Напишите программу, которая на вход принимает два числа A и B,
# # и возводит число А в целую степень B с помощью рекурсии.

# A = int(input("Введите число: "))
# B = int(input("Введите степень числа: "))
# def numb(A , B):
#     sum = 1
#     if B == 0:
#         return 1
#     else:
#         return A * numb(A , B - 1)
# print(f"Число {A} в стпени {B} равно {numb(A,B)}")


# # Напишите рекурсивную функцию sum(a, b), возвращающую сумму двух целых неотрицательных чисел.
# # Из всех арифметических операций допускаются только +1 и -1. Также нельзя использовать циклы.

# A = int(input("Введите первое число: "))
# B = int(input("Введите второе число: "))
# def sum(A , B):
#     if A==0:
#         return B
#     else:
#         return sum(A-1, B+1)
# print(f"Cумма {A} и {B} равна: {sum(A, B)}")


# # Задача 30:  Заполните массив элементами арифметической прогрессии. Её первый элемент, 
# # разность и количество элементов нужно ввести с клавиатуры. 
# # Формула для получения n-го члена прогрессии: an = a1 + (n-1) * d.
# # Каждое число вводится с новой строки.

# A = int(input("Введите значение 1-го элемента: "))
# B = int(input("Введите разность элементов: "))
# N = int(input("Введите количество элементов: "))
# mass = [A + (i - 1) * B for i in range(1, N + 1)]
# print(*mass)


# # Задача 32: Определить индексы элементов массива (списка), значения которых принадлежат заданному диапазону 
# # (т.е. не меньше заданного минимума и не больше заданного максимума)

# import random 
# rand_list=[]
# N = int(input("Введите количество элементов массива: "))
# A = int(input("Введите минимальное число: "))
# B = int(input("Введите максимальное число: "))
# for i in range(N):
#      rand_list.append(random.randint(-10 , 10))
# print(rand_list)
# for i in range(len(rand_list)):
#     if A <= rand_list[i] <= B:
#         print(f"Индекс элемента который стоит от {A} до {B}: {i}")

# # Задача 34:  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку разобраться в его кричалках не настолько просто, 
# # насколько легко он их придумывает, Вам стоит написать программу. 
# # Винни-Пух считает, что ритм есть, если число слогов (т.е. число гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного слова,
# # если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг от друга пробелами. 
# # Стихотворение  Винни-Пух вбивает в программу с клавиатуры. В ответе напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не в порядке

# words = 'пара-ра-рам рам-пам-папам па-ра-па-да'
# key = ['а', 'о', 'э', 'е', 'и', 'ы', 'у', 'ё', 'ю', 'я']
# Rythm = words.split()
# result = list()
# for i in Rythm:
#     count = 0
#     for n in i:
#         if n in key:
#             count = count+1
#     result.append(count)
# if len(set(result)) == 1:
#     print('Парам пам-пам')
# else: print('Пам парам')


# # Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6), 
# # которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и столбца. 
# # Аргументы num_rows и num_columns указывают число строк и столбцов таблицы, которые должны быть распечатаны.
# # Нумерация строк и столбцов идет с единицы (подумайте, почему не с нуля). 
# # Примечание: бинарной операцией называется любая операция, у которой ровно два аргумента, как, например, 
# # у операции умножения.


# def print_operation_table(operation, num_rows=6, num_columns=6):
#     for i in range(1, num_rows + 1):
#         list = []
#         for j in range(1, num_columns + 1):            
#             list.append(str(operation(i, j)))
#         print(''.join(f'{e:>3}' for e in list))
# print_operation_table(lambda x, y: x * y)



# Дополнить телефонный справочник возможностью изменения и удаления данных. 
# Пользователь также может ввести имя или фамилию, и Вы должны реализовать функционал для изменения и удаления данных

def show_data(filename):
    print("\nПП | ФИО | Телефон")
    with open(filename, "r", encoding="utf-8") as data:
        print(data.read())
    print("")

# Записывает информацию в файл
def export_data(filename):
    with open(filename, "r", encoding="utf-8") as data:
        tel_file = data.read()
    num = len(tel_file.split("\n"))
    with open(filename, "a", encoding="utf-8") as data: 
        fio = input("Введите ФИО: ")
        phone_number = input("Введите номер телефона: ")
        data.write(f"{num} | {fio} | {phone_number}\n")
        print(f"Добавлена запись : {num} | {fio} | {phone_number}\n")

# Изменяет информацию из файла
def edit_data(filename):
    print("\nПП | ФИО | Телефон")
    with open(filename, "r", encoding='utf-8') as data:
        tel_book = data.read()
    print(tel_book)
    print("")
    index_delete_data = int(input("Введите номер строки для редактирования: ")) - 1
    tel_book_lines = tel_book.split("\n")
    edit_tel_book_lines = tel_book_lines[index_delete_data]
    elements = edit_tel_book_lines.split(" | ")
    fio = input("Введите ФИО: ")
    phone = input("Введите номер телефона: ")
    num = elements[0]
    if len(fio) == 0:
        fio = elements[1]
    if len(phone) == 0:
        phone = elements[2]
    edited_line = f"{num} | {fio} | {phone}"
    tel_book_lines[index_delete_data] = edited_line
    print(f"Запись - {edit_tel_book_lines}, изменена на - {edited_line}\n")
    with open(filename, "w", encoding='utf-8') as f:
        f.write("\n".join(tel_book_lines))

# Удаляет информацию из файла
def delete_data(filename):
    print("\nПП | ФИО | Телефон")
    with open(filename, "r", encoding="utf-8") as data:
        tel_book = data.read()
        print(tel_book)
    print("")
    index_delete_data = int(input("Введите номер строки для удаления: ")) - 1
    tel_book_lines = tel_book.split("\n")
    del_tel_book_lines = tel_book_lines[index_delete_data]
    tel_book_lines.pop(index_delete_data)
    print(f"Удалена запись: {del_tel_book_lines}\n")
    with open(filename, "w", encoding='utf-8') as data:
        data.write("\n".join(tel_book_lines))

def main():
    my_choice = -1
    file_tel = "telephon.txt"

    # Создает файл если его нет в папке
    with open(file_tel, "a", encoding="utf-8") as file:
         file.write("")

    while my_choice != 0:
        print("Выберите одно из действий:")
        print("1 - Вывести инфо на экран")
        print("2 - Произвести экпорт данных")
        print("3 - Произвести изменение данных")
        print("4 - Произвести удаление данных")
        print("0 - Выход из программы")
        action = int(input("Действие: "))
        if action == 1:
            show_data(file_tel)
        elif action == 2:
            export_data(file_tel)
        elif action == 3:
            edit_data(file_tel)
        elif action == 4:
            delete_data(file_tel)
        else:
            my_choice = 0

    print("До свидания")

if __name__ == "__main__":
    main()
